{"ast":null,"code":"import Arweave from 'arweave';\nconst arweave = Arweave.init({\n  host: 'arweave.net',\n  port: 443,\n  protocol: 'https',\n  timeout: 20000,\n  logging: false\n});\n\nasync function getWalletAddress(wallet) {\n  return arweave.wallets.jwkToAddress(wallet);\n}\n\nasync function getAddressBalance(key) {\n  const balance = await arweave.wallets.getBalance(key);\n  const convert = arweave.ar.winstonToAr(balance);\n  return convert;\n}\n\nasync function createDataTransaction(data, key) {\n  let transform = JSON.stringify(data);\n  let transaction = await arweave.createTransaction({\n    data: transform\n  }, key);\n  transaction.addTag('Application', 'armeme-gallery-2021');\n  return transaction;\n}\n\nasync function signAndSubmitTransaction(transaction, key) {\n  await arweave.transactions.sign(transaction, key);\n  let response = await arweave.transactions.post(transaction);\n  return response;\n}\n\nasync function getTransactionData(id) {\n  return await arweave.transactions.getData(id, {\n    decode: true,\n    string: true\n  });\n}\n\nasync function queryData(key) {\n  let walletAddy = await getWalletAddress(key);\n  walletAddy = walletAddy.toString();\n  const txids = await arweave.arql({\n    op: 'and',\n    expr1: {\n      op: 'equals',\n      expr1: 'from',\n      expr2: walletAddy\n    },\n    expr2: {\n      op: 'equals',\n      expr1: 'Application',\n      expr2: 'armeme-gallery-2021'\n    }\n  });\n  return txids;\n}\n\nexport { getWalletAddress, getAddressBalance, createDataTransaction, signAndSubmitTransaction, getTransactionData, queryData };","map":{"version":3,"sources":["C:/Users/amant/OneDrive/Desktop/Web Dev Projects/arweave-app/src/Arweave.js"],"names":["Arweave","arweave","init","host","port","protocol","timeout","logging","getWalletAddress","wallet","wallets","jwkToAddress","getAddressBalance","key","balance","getBalance","convert","ar","winstonToAr","createDataTransaction","data","transform","JSON","stringify","transaction","createTransaction","addTag","signAndSubmitTransaction","transactions","sign","response","post","getTransactionData","id","getData","decode","string","queryData","walletAddy","toString","txids","arql","op","expr1","expr2"],"mappings":"AAAA,OAAOA,OAAP,MAAoB,SAApB;AAEA,MAAMC,OAAO,GAAGD,OAAO,CAACE,IAAR,CAAa;AAC3BC,EAAAA,IAAI,EAAE,aADqB;AAE3BC,EAAAA,IAAI,EAAE,GAFqB;AAG3BC,EAAAA,QAAQ,EAAE,OAHiB;AAI3BC,EAAAA,OAAO,EAAE,KAJkB;AAK3BC,EAAAA,OAAO,EAAE;AALkB,CAAb,CAAhB;;AAQA,eAAeC,gBAAf,CAAgCC,MAAhC,EAAwC;AACtC,SAAOR,OAAO,CAACS,OAAR,CAAgBC,YAAhB,CAA6BF,MAA7B,CAAP;AACD;;AAED,eAAeG,iBAAf,CAAiCC,GAAjC,EAAsC;AACpC,QAAMC,OAAO,GAAG,MAAMb,OAAO,CAACS,OAAR,CAAgBK,UAAhB,CAA2BF,GAA3B,CAAtB;AACA,QAAMG,OAAO,GAAGf,OAAO,CAACgB,EAAR,CAAWC,WAAX,CAAuBJ,OAAvB,CAAhB;AACA,SAAOE,OAAP;AACD;;AAED,eAAeG,qBAAf,CAAqCC,IAArC,EAA2CP,GAA3C,EAAgD;AAC9C,MAAIQ,SAAS,GAAGC,IAAI,CAACC,SAAL,CAAeH,IAAf,CAAhB;AACA,MAAII,WAAW,GAAG,MAAMvB,OAAO,CAACwB,iBAAR,CAA0B;AAAEL,IAAAA,IAAI,EAAEC;AAAR,GAA1B,EAA+CR,GAA/C,CAAxB;AAEAW,EAAAA,WAAW,CAACE,MAAZ,CAAmB,aAAnB,EAAkC,qBAAlC;AAEA,SAAOF,WAAP;AACD;;AAED,eAAeG,wBAAf,CAAwCH,WAAxC,EAAqDX,GAArD,EAA0D;AACxD,QAAMZ,OAAO,CAAC2B,YAAR,CAAqBC,IAArB,CAA0BL,WAA1B,EAAuCX,GAAvC,CAAN;AACA,MAAIiB,QAAQ,GAAG,MAAM7B,OAAO,CAAC2B,YAAR,CAAqBG,IAArB,CAA0BP,WAA1B,CAArB;AACA,SAAOM,QAAP;AACD;;AAED,eAAeE,kBAAf,CAAkCC,EAAlC,EAAsC;AACpC,SAAO,MAAMhC,OAAO,CAAC2B,YAAR,CAAqBM,OAArB,CAA6BD,EAA7B,EAAiC;AAAEE,IAAAA,MAAM,EAAE,IAAV;AAAgBC,IAAAA,MAAM,EAAE;AAAxB,GAAjC,CAAb;AACD;;AAED,eAAeC,SAAf,CAAyBxB,GAAzB,EAA8B;AAC5B,MAAIyB,UAAU,GAAG,MAAM9B,gBAAgB,CAACK,GAAD,CAAvC;AACAyB,EAAAA,UAAU,GAAGA,UAAU,CAACC,QAAX,EAAb;AACA,QAAMC,KAAK,GAAG,MAAMvC,OAAO,CAACwC,IAAR,CAAa;AAC/BC,IAAAA,EAAE,EAAE,KAD2B;AAE/BC,IAAAA,KAAK,EAAE;AACLD,MAAAA,EAAE,EAAE,QADC;AAELC,MAAAA,KAAK,EAAE,MAFF;AAGLC,MAAAA,KAAK,EAAEN;AAHF,KAFwB;AAO/BM,IAAAA,KAAK,EAAE;AACLF,MAAAA,EAAE,EAAE,QADC;AAELC,MAAAA,KAAK,EAAE,aAFF;AAGLC,MAAAA,KAAK,EAAE;AAHF;AAPwB,GAAb,CAApB;AAcA,SAAOJ,KAAP;AACD;;AAED,SACEhC,gBADF,EAEEI,iBAFF,EAGEO,qBAHF,EAIEQ,wBAJF,EAKEK,kBALF,EAMEK,SANF","sourcesContent":["import Arweave from 'arweave';\r\n\r\nconst arweave = Arweave.init({\r\n  host: 'arweave.net',\r\n  port: 443,\r\n  protocol: 'https',\r\n  timeout: 20000,\r\n  logging: false,\r\n});\r\n\r\nasync function getWalletAddress(wallet) {\r\n  return arweave.wallets.jwkToAddress(wallet);\r\n}\r\n\r\nasync function getAddressBalance(key) {\r\n  const balance = await arweave.wallets.getBalance(key);\r\n  const convert = arweave.ar.winstonToAr(balance);\r\n  return convert;\r\n}\r\n\r\nasync function createDataTransaction(data, key) {\r\n  let transform = JSON.stringify(data);\r\n  let transaction = await arweave.createTransaction({ data: transform }, key);\r\n\r\n  transaction.addTag('Application', 'armeme-gallery-2021');\r\n\r\n  return transaction;\r\n}\r\n\r\nasync function signAndSubmitTransaction(transaction, key) {\r\n  await arweave.transactions.sign(transaction, key);\r\n  let response = await arweave.transactions.post(transaction);\r\n  return response;\r\n}\r\n\r\nasync function getTransactionData(id) {\r\n  return await arweave.transactions.getData(id, { decode: true, string: true });\r\n}\r\n\r\nasync function queryData(key) {\r\n  let walletAddy = await getWalletAddress(key);\r\n  walletAddy = walletAddy.toString();\r\n  const txids = await arweave.arql({\r\n    op: 'and',\r\n    expr1: {\r\n      op: 'equals',\r\n      expr1: 'from',\r\n      expr2: walletAddy,\r\n    },\r\n    expr2: {\r\n      op: 'equals',\r\n      expr1: 'Application',\r\n      expr2: 'armeme-gallery-2021',\r\n    },\r\n  });\r\n\r\n  return txids;\r\n}\r\n\r\nexport {\r\n  getWalletAddress,\r\n  getAddressBalance,\r\n  createDataTransaction,\r\n  signAndSubmitTransaction,\r\n  getTransactionData,\r\n  queryData,\r\n};\r\n"]},"metadata":{},"sourceType":"module"}